// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: String.fromEnvironment('FIREBASE_API_KEY'),
    appId: String.fromEnvironment('FIREBASE_APP_ID'),
    messagingSenderId: String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: String.fromEnvironment('FIREBASE_PROJECT_ID'),
    authDomain: String.fromEnvironment('FIREBASE_AUTH_DOMAIN'),
    storageBucket: String.fromEnvironment('FIREBASE_STORAGE_BUCKET'),
    measurementId: String.fromEnvironment('FIREBASE_MEASUREMENT_ID'),
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: String.fromEnvironment('FIREBASE_API_KEY_ANDROID',
        defaultValue: String.fromEnvironment('FIREBASE_API_KEY')),
    appId: String.fromEnvironment('FIREBASE_APP_ID_ANDROID',
        defaultValue: String.fromEnvironment('FIREBASE_APP_ID')),
    messagingSenderId: String.fromEnvironment(
        'FIREBASE_MESSAGING_SENDER_ID_ANDROID',
        defaultValue: String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID')),
    projectId: String.fromEnvironment('FIREBASE_PROJECT_ID_ANDROID',
        defaultValue: String.fromEnvironment('FIREBASE_PROJECT_ID')),
    storageBucket: String.fromEnvironment('FIREBASE_STORAGE_BUCKET_ANDROID',
        defaultValue: String.fromEnvironment('FIREBASE_STORAGE_BUCKET')),
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: String.fromEnvironment('FIREBASE_API_KEY_IOS',
        defaultValue: String.fromEnvironment('FIREBASE_API_KEY')),
    appId: String.fromEnvironment('FIREBASE_APP_ID_IOS',
        defaultValue: String.fromEnvironment('FIREBASE_APP_ID')),
    messagingSenderId: String.fromEnvironment(
        'FIREBASE_MESSAGING_SENDER_ID_IOS',
        defaultValue: String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID')),
    projectId: String.fromEnvironment('FIREBASE_PROJECT_ID_IOS',
        defaultValue: String.fromEnvironment('FIREBASE_PROJECT_ID')),
    storageBucket: String.fromEnvironment('FIREBASE_STORAGE_BUCKET_IOS',
        defaultValue: String.fromEnvironment('FIREBASE_STORAGE_BUCKET')),
    iosBundleId: String.fromEnvironment('FIREBASE_IOS_BUNDLE_ID'),
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: String.fromEnvironment('FIREBASE_API_KEY_MACOS',
        defaultValue: String.fromEnvironment('FIREBASE_API_KEY')),
    appId: String.fromEnvironment('FIREBASE_APP_ID_MACOS',
        defaultValue: String.fromEnvironment('FIREBASE_APP_ID')),
    messagingSenderId: String.fromEnvironment(
        'FIREBASE_MESSAGING_SENDER_ID_MACOS',
        defaultValue: String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID')),
    projectId: String.fromEnvironment('FIREBASE_PROJECT_ID_MACOS',
        defaultValue: String.fromEnvironment('FIREBASE_PROJECT_ID')),
    storageBucket: String.fromEnvironment('FIREBASE_STORAGE_BUCKET_MACOS',
        defaultValue: String.fromEnvironment('FIREBASE_STORAGE_BUCKET')),
    iosBundleId: String.fromEnvironment('FIREBASE_MACOS_BUNDLE_ID'),
  );
}
