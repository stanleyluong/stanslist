import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';
import 'package:url_launcher/url_launcher.dart';

import '../models/category.dart';
import '../providers/listings_provider.dart';
import '../widgets/app_bar.dart';
import '../widgets/side_panel.dart';

class ListingDetailScreen extends StatefulWidget {
  final String listingId;

  const ListingDetailScreen({
    super.key,
    required this.listingId,
  });

  @override
  State<ListingDetailScreen> createState() => _ListingDetailScreenState();
}

class _ListingDetailScreenState extends State<ListingDetailScreen> {
  int _selectedImageIndex = 0;
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const StansListAppBar(),
      body: Consumer<ListingsProvider>(
        builder: (context, provider, child) {
          final listing = provider.getListingById(widget.listingId);

          if (listing == null) {
            return const Center(
              child: Text('Listing not found'),
            );
          }

          // Use placeholder if no images
          final images = listing.images.isEmpty 
              ? ['assets/images/placeholder-image.jpg'] 
              : listing.images;
          
          return Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Left side panel for navigation
              const SidePanel(),
              
              // Main content area
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      // Main large image in the middle
                      Container(
                        constraints: const BoxConstraints(
                          maxHeight: 500,
                        ),
                        margin: const EdgeInsets.all(20),
                        decoration: BoxDecoration(
                          color: Colors.grey.shade200,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: images.isNotEmpty
                            ? ClipRRect(
                                borderRadius: BorderRadius.circular(8),
                                child: Image(
                                  image: images[_selectedImageIndex].startsWith('assets/')
                                      ? AssetImage(images[_selectedImageIndex])
                                      : NetworkImage(images[_selectedImageIndex])
                                          as ImageProvider,
                                  fit: BoxFit.contain,
                                ),
                              )
                            : const Center(
                                child: Icon(
                                  Icons.image,
                                  size: 64,
                                  color: Colors.grey,
                                ),
                              ),
                      ),
                      
                      // Image gallery at the bottom
                      if (images.length > 1)
                        Container(
                          height: 100,
                          margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                          child: ListView.builder(
                            scrollDirection: Axis.horizontal,
                            itemCount: images.length,
                            itemBuilder: (context, index) {
                              return GestureDetector(
                                onTap: () {
                                  setState(() {
                                    _selectedImageIndex = index;
                                  });
                                },
                                child: Container(
                                  width: 100,
                                  margin: const EdgeInsets.symmetric(horizontal: 8),
                                  decoration: BoxDecoration(
                                    border: _selectedImageIndex == index
                                        ? Border.all(color: Theme.of(context).colorScheme.primary, width: 2)
                                        : null,
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  child: Opacity(
                                    opacity: _selectedImageIndex == index ? 1.0 : 0.5,
                                    child: ClipRRect(
                                      borderRadius: BorderRadius.circular(6),
                                      child: Image(
                                        image: images[index].startsWith('assets/')
                                            ? AssetImage(images[index])
                                            : NetworkImage(images[index])
                                                as ImageProvider,
                                        fit: BoxFit.cover,
                                      ),
                                    ),
                                  ),
                                ),
                              );
                            },
                          ),
                        ),
                    ],
                  ),
                ),
              ),
              
              // Right side details panel
              Container(
                width: 350,
                height: MediaQuery.of(context).size.height,
                padding: const EdgeInsets.all(24),
                decoration: BoxDecoration(
                  border: Border(
                    left: BorderSide(
                      color: Colors.grey.shade300,
                      width: 1,
                    ),
                  ),
                ),
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Title
                      Text(
                        listing.title,
                        style: Theme.of(context)
                            .textTheme
                            .headlineMedium
                            ?.copyWith(
                              fontWeight: FontWeight.bold,
                            ),
                      ),
                      const SizedBox(height: 12),

                      // Price
                      Text(
                        NumberFormat.currency(symbol: '\$', decimalDigits: 0)
                            .format(listing.price),
                        style: Theme.of(context)
                            .textTheme
                            .headlineSmall
                            ?.copyWith(
                              color: Theme.of(context).colorScheme.primary,
                              fontWeight: FontWeight.bold,
                            ),
                      ),
                      const SizedBox(height: 20),
                      
                      // Category chip
                      Row(
                        children: [
                          const Icon(Icons.category_outlined, size: 20),
                          const SizedBox(width: 8),
                          Chip(
                            label: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Text(
                                  Categories.getById(listing.category)?.icon ??
                                      'ðŸ“¦',
                                  style: const TextStyle(fontSize: 16),
                                ),
                                const SizedBox(width: 4),
                                Text(
                                  Categories.getById(listing.category)?.name ??
                                      listing.category,
                                ),
                              ],
                            ),
                            backgroundColor: Theme.of(context)
                                .colorScheme
                                .primary
                                .withAlpha((255 * 0.1).round()),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),

                      // Location and date
                      Row(
                        children: [
                          Icon(
                            Icons.location_on_outlined,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                          const SizedBox(width: 4),
                          Expanded(
                            child: Text(
                              listing.location,
                              style: TextStyle(color: Colors.grey.shade600),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          Icon(
                            Icons.schedule,
                            size: 16,
                            color: Colors.grey.shade600,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            "Posted ${DateFormat.yMMMd().format(listing.createdAt)}",
                            style: TextStyle(color: Colors.grey.shade600),
                          ),
                        ],
                      ),
                      const Divider(height: 30),

                      // Description
                      Text(
                        'Description',
                        style: Theme.of(context).textTheme.titleLarge?.copyWith(
                              fontWeight: FontWeight.bold,
                            ),
                      ),
                      const SizedBox(height: 10),
                      Text(
                        listing.description,
                        style: Theme.of(context).textTheme.bodyLarge,
                      ),
                      const Divider(height: 30),

                      // Contact Information
                      Text(
                        'Contact Seller',
                        style: Theme.of(context)
                            .textTheme
                            .titleLarge
                            ?.copyWith(
                              fontWeight: FontWeight.bold,
                            ),
                      ),
                      const SizedBox(height: 16),

                      // Email button
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          onPressed: () =>
                              _launchEmail(listing.contactEmail),
                          icon: const Icon(Icons.email),
                          label: Text('Email: ${listing.contactEmail}'),
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.all(16),
                          ),
                        ),
                      ),

                      // Phone button (if available)
                      if (listing.contactPhone != null) ...[
                        const SizedBox(height: 12),
                        SizedBox(
                          width: double.infinity,
                          child: OutlinedButton.icon(
                            onPressed: () =>
                                _launchPhone(listing.contactPhone!),
                            icon: const Icon(Icons.phone),
                            label:
                                Text('Call: ${listing.contactPhone}'),
                            style: OutlinedButton.styleFrom(
                              padding: const EdgeInsets.all(16),
                            ),
                          ),
                        ),                              ],
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Future<void> _launchEmail(String email) async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: email,
      query: 'subject=Inquiry about your listing',
    );
    // Removed unnecessary null check for email as it's a required field for Listing
    if (await canLaunchUrl(emailUri)) {
      await launchUrl(emailUri);
    }
  }

  Future<void> _launchPhone(String phone) async {
    final Uri phoneUri = Uri(
      scheme: 'tel',
      path: phone,
    );
    // Removed unnecessary null check for phone as it's checked before calling
    if (await canLaunchUrl(phoneUri)) {
      await launchUrl(phoneUri);
    }
  }
}
